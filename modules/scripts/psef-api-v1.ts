/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/DesaKelurahan/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Desa/Kelurahan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v1/DesaKelurahan": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Desa/Kelurahan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["DesaKelurahanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Desa/Kelurahan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["DesaKelurahan"];
          };
        };
        /** The Desa/Kelurahan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Desa/Kelurahan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Desa/Kelurahan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Desa/Kelurahan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=minimal": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none": components["schemas"]["DesaKelurahan"];
          "application/json;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json": components["schemas"]["DesaKelurahan"];
          "application/xml": components["schemas"]["DesaKelurahan"];
          "text/json": components["schemas"]["DesaKelurahan"];
          "application/*+json": components["schemas"]["DesaKelurahan"];
        };
      };
    };
  };
  "/api/v1/DesaKelurahan({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Desa/Kelurahan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Desa/Kelurahan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["DesaKelurahan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Desa/Kelurahan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Desa/Kelurahan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Desa/Kelurahan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["DesaKelurahan"];
          };
        };
        /** The Desa/Kelurahan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Desa/Kelurahan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Desa/Kelurahan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Desa/Kelurahan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=minimal": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none": components["schemas"]["DesaKelurahan"];
          "application/json;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json": components["schemas"]["DesaKelurahan"];
          "application/xml": components["schemas"]["DesaKelurahan"];
          "text/json": components["schemas"]["DesaKelurahan"];
          "application/*+json": components["schemas"]["DesaKelurahan"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Desa/Kelurahan to delete. */
          id: number;
        };
      };
      responses: {
        /** The Desa/Kelurahan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Desa/Kelurahan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Desa/Kelurahan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Desa/Kelurahan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["DesaKelurahan"];
          };
        };
        /** The Desa/Kelurahan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Desa/Kelurahan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Desa/Kelurahan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Desa/Kelurahan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Desa/Kelurahan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=minimal": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=full": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json;odata.metadata=none": components["schemas"]["DesaKelurahan"];
          "application/json;odata.streaming=true": components["schemas"]["DesaKelurahan"];
          "application/json;odata.streaming=false": components["schemas"]["DesaKelurahan"];
          "application/json": components["schemas"]["DesaKelurahan"];
          "application/xml": components["schemas"]["DesaKelurahan"];
          "text/json": components["schemas"]["DesaKelurahan"];
          "application/*+json": components["schemas"]["DesaKelurahan"];
        };
      };
    };
  };
  "/api/v1/HomepageBanner": {
    /** *Anonymous Access* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Homepage Banner successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageBannerIEnumerableODataValue"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Homepage Banner was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["HomepageBanner"];
          };
        };
        /** The Homepage Banner was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage Banner is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Banner with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Homepage Banner to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=minimal": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=full": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=none": components["schemas"]["HomepageBanner"];
          "application/json;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json": components["schemas"]["HomepageBanner"];
          "application/xml": components["schemas"]["HomepageBanner"];
          "text/json": components["schemas"]["HomepageBanner"];
          "application/*+json": components["schemas"]["HomepageBanner"];
        };
      };
    };
  };
  "/api/v1/HomepageBanner({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Homepage Banner identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Homepage Banner was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageBanner"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Banner does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Homepage Banner to delete. */
          id: number;
        };
      };
      responses: {
        /** The Homepage Banner was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Banner does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Homepage Banner identifier. */
          id: number;
        };
      };
      responses: {
        /** The Homepage Banner was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageBanner"];
          };
        };
        /** The Homepage Banner was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage Banner is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Banner does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage Banner identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Homepage Banner to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=minimal": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=full": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json;odata.metadata=none": components["schemas"]["HomepageBanner"];
          "application/json;odata.streaming=true": components["schemas"]["HomepageBanner"];
          "application/json;odata.streaming=false": components["schemas"]["HomepageBanner"];
          "application/json": components["schemas"]["HomepageBanner"];
          "application/xml": components["schemas"]["HomepageBanner"];
          "text/json": components["schemas"]["HomepageBanner"];
          "application/*+json": components["schemas"]["HomepageBanner"];
        };
      };
    };
  };
  "/api/v1/HomepageNews": {
    /** *Anonymous Access* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Homepage News successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageNewsIEnumerableODataValue"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Homepage News was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["HomepageNews"];
          };
        };
        /** The Homepage News was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage News is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage News with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Homepage News to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=minimal": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=full": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=none": components["schemas"]["HomepageNews"];
          "application/json;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json": components["schemas"]["HomepageNews"];
          "application/xml": components["schemas"]["HomepageNews"];
          "text/json": components["schemas"]["HomepageNews"];
          "application/*+json": components["schemas"]["HomepageNews"];
        };
      };
    };
  };
  "/api/v1/HomepageNews({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Homepage News identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Homepage News was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageNews"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage News does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Homepage News to delete. */
          id: number;
        };
      };
      responses: {
        /** The Homepage News was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage News does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Homepage News identifier. */
          id: number;
        };
      };
      responses: {
        /** The Homepage News was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageNews"];
          };
        };
        /** The Homepage News was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage News is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage News does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage News identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Homepage News to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=minimal": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=full": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json;odata.metadata=none": components["schemas"]["HomepageNews"];
          "application/json;odata.streaming=true": components["schemas"]["HomepageNews"];
          "application/json;odata.streaming=false": components["schemas"]["HomepageNews"];
          "application/json": components["schemas"]["HomepageNews"];
          "application/xml": components["schemas"]["HomepageNews"];
          "text/json": components["schemas"]["HomepageNews"];
          "application/*+json": components["schemas"]["HomepageNews"];
        };
      };
    };
  };
  "/api/v1/HomepageUnduhan": {
    /** *Anonymous Access* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Homepage Unduhan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageUnduhanIEnumerableODataValue"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Homepage Unduhan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["HomepageUnduhan"];
          };
        };
        /** The Homepage Unduhan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage Unduhan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Unduhan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Homepage Unduhan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=minimal": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=full": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=none": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json": components["schemas"]["HomepageUnduhan"];
          "application/xml": components["schemas"]["HomepageUnduhan"];
          "text/json": components["schemas"]["HomepageUnduhan"];
          "application/*+json": components["schemas"]["HomepageUnduhan"];
        };
      };
    };
  };
  "/api/v1/HomepageUnduhan({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Homepage Unduhan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Homepage Unduhan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageUnduhan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Unduhan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Homepage Unduhan to delete. */
          id: number;
        };
      };
      responses: {
        /** The Homepage Unduhan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Unduhan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Homepage Unduhan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Homepage Unduhan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["HomepageUnduhan"];
          };
        };
        /** The Homepage Unduhan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage Unduhan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Homepage Unduhan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Homepage Unduhan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Homepage Unduhan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=minimal": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=full": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.metadata=none": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.streaming=true": components["schemas"]["HomepageUnduhan"];
          "application/json;odata.streaming=false": components["schemas"]["HomepageUnduhan"];
          "application/json": components["schemas"]["HomepageUnduhan"];
          "application/xml": components["schemas"]["HomepageUnduhan"];
          "text/json": components["schemas"]["HomepageUnduhan"];
          "application/*+json": components["schemas"]["HomepageUnduhan"];
        };
      };
    };
  };
  "/api/v1/KabupatenKota/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Kabupaten/Kota retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v1/KabupatenKota": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Kabupaten/Kota successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["KabupatenKotaIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Kabupaten/Kota was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["KabupatenKota"];
          };
        };
        /** The Kabupaten/Kota was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kabupaten/Kota is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kabupaten/Kota with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Kabupaten/Kota to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=minimal": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none": components["schemas"]["KabupatenKota"];
          "application/json;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json": components["schemas"]["KabupatenKota"];
          "application/xml": components["schemas"]["KabupatenKota"];
          "text/json": components["schemas"]["KabupatenKota"];
          "application/*+json": components["schemas"]["KabupatenKota"];
        };
      };
    };
  };
  "/api/v1/KabupatenKota({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Kabupaten/Kota identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Kabupaten/Kota was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["KabupatenKota"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kabupaten/Kota does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Kabupaten/Kota identifier. */
          id: number;
        };
      };
      responses: {
        /** The Kabupaten/Kota was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["KabupatenKota"];
          };
        };
        /** The Kabupaten/Kota was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kabupaten/Kota is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kabupaten/Kota does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Kabupaten/Kota to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=minimal": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none": components["schemas"]["KabupatenKota"];
          "application/json;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json": components["schemas"]["KabupatenKota"];
          "application/xml": components["schemas"]["KabupatenKota"];
          "text/json": components["schemas"]["KabupatenKota"];
          "application/*+json": components["schemas"]["KabupatenKota"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Kabupaten/Kota to delete. */
          id: number;
        };
      };
      responses: {
        /** The Kabupaten/Kota was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kabupaten/Kota does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Kabupaten/Kota identifier. */
          id: number;
        };
      };
      responses: {
        /** The Kabupaten/Kota was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["KabupatenKota"];
          };
        };
        /** The Kabupaten/Kota was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kabupaten/Kota is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kabupaten/Kota does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kabupaten/Kota identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Kabupaten/Kota to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=minimal": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=full": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json;odata.metadata=none": components["schemas"]["KabupatenKota"];
          "application/json;odata.streaming=true": components["schemas"]["KabupatenKota"];
          "application/json;odata.streaming=false": components["schemas"]["KabupatenKota"];
          "application/json": components["schemas"]["KabupatenKota"];
          "application/xml": components["schemas"]["KabupatenKota"];
          "text/json": components["schemas"]["KabupatenKota"];
          "application/*+json": components["schemas"]["KabupatenKota"];
        };
      };
    };
  };
  "/api/v1/Kecamatan/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Kecamatan retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v1/Kecamatan": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Kecamatan successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["KecamatanIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Kecamatan was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["Kecamatan"];
          };
        };
        /** The Kecamatan was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kecamatan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kecamatan with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Kecamatan to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none": components["schemas"]["Kecamatan"];
          "application/json;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json": components["schemas"]["Kecamatan"];
          "application/xml": components["schemas"]["Kecamatan"];
          "text/json": components["schemas"]["Kecamatan"];
          "application/*+json": components["schemas"]["Kecamatan"];
        };
      };
    };
  };
  "/api/v1/Kecamatan({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Kecamatan identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Kecamatan was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["Kecamatan"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kecamatan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Kecamatan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Kecamatan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Kecamatan"];
          };
        };
        /** The Kecamatan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kecamatan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kecamatan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Kecamatan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none": components["schemas"]["Kecamatan"];
          "application/json;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json": components["schemas"]["Kecamatan"];
          "application/xml": components["schemas"]["Kecamatan"];
          "text/json": components["schemas"]["Kecamatan"];
          "application/*+json": components["schemas"]["Kecamatan"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Kecamatan to delete. */
          id: number;
        };
      };
      responses: {
        /** The Kecamatan was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kecamatan does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Kecamatan identifier. */
          id: number;
        };
      };
      responses: {
        /** The Kecamatan was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Kecamatan"];
          };
        };
        /** The Kecamatan was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kecamatan is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Kecamatan does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Kecamatan identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Kecamatan to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=minimal": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=full": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json;odata.metadata=none": components["schemas"]["Kecamatan"];
          "application/json;odata.streaming=true": components["schemas"]["Kecamatan"];
          "application/json;odata.streaming=false": components["schemas"]["Kecamatan"];
          "application/json": components["schemas"]["Kecamatan"];
          "application/xml": components["schemas"]["Kecamatan"];
          "text/json": components["schemas"]["Kecamatan"];
          "application/*+json": components["schemas"]["Kecamatan"];
        };
      };
    };
  };
  "/api/v1/Provinsi/TotalCount": {
    /** *Min role: None* */
    get: {
      responses: {
        /** Total count of Provinsi retrieved. */
        200: {
          content: {
            "application/json": number;
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
  };
  "/api/v1/Provinsi": {
    /** *Min role: None* */
    get: {
      parameters: {
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
          /** Restricts the set of items returned. The maximum number of expressions is 100. The allowed functions are: allfunctions. */
          $filter?: string;
          /** Specifies the order in which items are returned. The maximum number of expressions is 5. */
          $orderby?: string;
          /** Limits the number of items returned from a collection. The maximum value is 50. */
          $top?: number;
          /** Excludes the specified number of items of the queried collection from the result. */
          $skip?: number;
          /** Indicates whether the total count of items within a collection are returned in the result. */
          $count?: boolean;
        };
      };
      responses: {
        /** Provinsi successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["ProvinsiIEnumerableODataValue"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
      };
    };
    /** *Min role: Admin* */
    post: {
      responses: {
        /** The Provinsi was successfully created. */
        201: {
          content: {
            "application/json": components["schemas"]["Provinsi"];
          };
        };
        /** The Provinsi was successfully created. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Provinsi is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Provinsi with supplied id already exist. */
        409: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Provinsi to create. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=minimal": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none": components["schemas"]["Provinsi"];
          "application/json;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json": components["schemas"]["Provinsi"];
          "application/xml": components["schemas"]["Provinsi"];
          "text/json": components["schemas"]["Provinsi"];
          "application/*+json": components["schemas"]["Provinsi"];
        };
      };
    };
  };
  "/api/v1/Provinsi({id})": {
    /** *Min role: None* */
    get: {
      parameters: {
        path: {
          /** The requested Provinsi identifier. */
          id: number;
        };
        query: {
          /** Limits the properties returned in the result. */
          $select?: string;
        };
      };
      responses: {
        /** The Provinsi was successfully retrieved. */
        200: {
          content: {
            "application/json": components["schemas"]["Provinsi"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Provinsi does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
    };
    /** *Min role: Admin* */
    put: {
      parameters: {
        path: {
          /** The requested Provinsi identifier. */
          id: number;
        };
      };
      responses: {
        /** The Provinsi was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Provinsi"];
          };
        };
        /** The Provinsi was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Provinsi is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Provinsi does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The Provinsi to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=minimal": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none": components["schemas"]["Provinsi"];
          "application/json;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json": components["schemas"]["Provinsi"];
          "application/xml": components["schemas"]["Provinsi"];
          "text/json": components["schemas"]["Provinsi"];
          "application/*+json": components["schemas"]["Provinsi"];
        };
      };
    };
    /** *Min role: Admin* */
    delete: {
      parameters: {
        path: {
          /** The Provinsi to delete. */
          id: number;
        };
      };
      responses: {
        /** The Provinsi was successfully deleted. */
        204: never;
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Provinsi does not exist. */
        404: unknown;
      };
    };
    /** *Min role: Admin* */
    patch: {
      parameters: {
        path: {
          /** The requested Provinsi identifier. */
          id: number;
        };
      };
      responses: {
        /** The Provinsi was successfully updated. */
        200: {
          content: {
            "application/json": components["schemas"]["Provinsi"];
          };
        };
        /** The Provinsi was successfully updated. */
        204: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Provinsi is invalid. */
        400: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** Unauthorized */
        401: unknown;
        /** Forbidden */
        403: unknown;
        /** The Provinsi does not exist. */
        404: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
        /** The Provinsi identifier is specified on delta and its value is different from id. */
        422: {
          content: {
            "application/json": components["schemas"]["Void"];
          };
        };
      };
      /** The partial Provinsi to update. */
      requestBody: {
        content: {
          "application/json;odata.metadata=minimal;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=minimal;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=minimal": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=full": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json;odata.metadata=none": components["schemas"]["Provinsi"];
          "application/json;odata.streaming=true": components["schemas"]["Provinsi"];
          "application/json;odata.streaming=false": components["schemas"]["Provinsi"];
          "application/json": components["schemas"]["Provinsi"];
          "application/xml": components["schemas"]["Provinsi"];
          "text/json": components["schemas"]["Provinsi"];
          "application/*+json": components["schemas"]["Provinsi"];
        };
      };
    };
  };
}

export interface components {
  schemas: {
    /** @description Represents a Desa/Kelurahan. */
    DesaKelurahan: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Desa/Kelurahan.
       */
      id?: number;
      /** @description Gets or sets the Desa/Kelurahan name. */
      name?: string | null;
      /**
       * Format: int32
       * @description Gets or sets the associated Kecamatan identifier.
       */
      kecamatanId?: number | null;
    };
    DesaKelurahanIEnumerableODataValue: {
      value?: components["schemas"]["DesaKelurahan"][] | null;
    };
    Void: { [key: string]: unknown };
    /** @description Represents a Homepage Banner. */
    HomepageBanner: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Homepage Banner.
       */
      id?: number;
      /** @description Gets or sets the Homepage Banner url. */
      url?: string | null;
    };
    HomepageBannerIEnumerableODataValue: {
      value?: components["schemas"]["HomepageBanner"][] | null;
    };
    /** @description Represents a Homepage News. */
    HomepageNews: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Homepage News.
       */
      id?: number;
      /** @description Gets or sets the Homepage News title. */
      title?: string | null;
      /** @description Gets or sets the Homepage News content. */
      content?: string | null;
      /** @description Gets or sets the Homepage News image url. */
      imageUrl?: string | null;
      /** @description Gets or sets the Homepage News link url. */
      linkUrl?: string | null;
      /**
       * Format: date-time
       * @description Gets or sets the Homepage News published at.
       */
      publishedAt?: string;
    };
    HomepageNewsIEnumerableODataValue: {
      value?: components["schemas"]["HomepageNews"][] | null;
    };
    /** @description Represents a Homepage Unduhan. */
    HomepageUnduhan: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Homepage Unduhan.
       */
      id?: number;
      /** @description Gets or sets the Homepage Unduhan title. */
      title?: string | null;
      /** @description Gets or sets the Homepage Unduhan url. */
      url?: string | null;
    };
    HomepageUnduhanIEnumerableODataValue: {
      value?: components["schemas"]["HomepageUnduhan"][] | null;
    };
    /** @description Represents a Kabupaten/Kota. */
    KabupatenKota: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Kabupaten/Kota.
       */
      id?: number;
      /** @description Gets or sets the Kabupaten/Kota name. */
      name?: string | null;
      /**
       * Format: int32
       * @description Gets or sets the associated Provinsi identifier.
       */
      provinsiId?: number | null;
    };
    KabupatenKotaIEnumerableODataValue: {
      value?: components["schemas"]["KabupatenKota"][] | null;
    };
    /** @description Represents a Kecamatan. */
    Kecamatan: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Kecamatan.
       */
      id?: number;
      /** @description Gets or sets the Kecamatan name. */
      name?: string | null;
      /**
       * Format: int32
       * @description Gets or sets the associated Kabupaten/Kota identifier.
       */
      kabupatenKotaId?: number | null;
    };
    KecamatanIEnumerableODataValue: {
      value?: components["schemas"]["Kecamatan"][] | null;
    };
    /** @description Represents a Provinsi. */
    Provinsi: {
      /**
       * Format: int32
       * @description Gets or sets the unique identifier for the Provinsi.
       */
      id?: number;
      /** @description Gets or sets the Provinsi name. */
      name?: string | null;
    };
    ProvinsiIEnumerableODataValue: {
      value?: components["schemas"]["Provinsi"][] | null;
    };
  };
}

export interface operations {}

export interface external {}
